diff --git a/chrome/browser/ui/views/tabs/tab_style_views.cc b/chrome/browser/ui/views/tabs/tab_style_views.cc
index 950c967b5f87a6e3f531e3155a420002a7510d3a..ad84681855bc39f55796c8740f490b998e2bc68a 100644
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -154,6 +154,7 @@ class GM2TabStyle : public TabStyleViews {
 
   std::unique_ptr<GlowHoverController> hover_controller_;
   gfx::FontList normal_font_;
+  gfx::FontList semibold_font_;
   gfx::FontList heavy_font_;
 };
 
@@ -189,6 +190,7 @@ GM2TabStyle::GM2TabStyle(Tab* tab)
                             : nullptr),
       normal_font_(views::style::GetFont(views::style::CONTEXT_LABEL,
                                          views::style::STYLE_PRIMARY)),
+      semibold_font_(normal_font_.DeriveWithWeight(gfx::Font::Weight::SEMIBOLD)),
       heavy_font_(views::style::GetFont(views::style::CONTEXT_BUTTON_MD,
                                         views::style::STYLE_PRIMARY)) {
   // TODO(dfried): create a new STYLE_PROMINENT or similar to use instead of
@@ -280,6 +282,7 @@ SkPath GM2TabStyle::GetPath(PathType path_type,
   const ShapeModifier shape_modifier = GetShapeModifier(path_type);
   const bool extend_left_to_bottom = shape_modifier & kNoLowerLeftArc;
   const bool extend_right_to_bottom = shape_modifier & kNoLowerRightArc;
+  bottom_radius = 0;
 
   SkPath path;
 
@@ -459,6 +462,7 @@ TabStyle::TabColors GM2TabStyle::CalculateColors() const {
       expected_opacity > 0.5f ? TabActive::kActive : TabActive::kInactive,
       background_color);
 
+  BRAVE_CALCULATE_COLORS
   return {foreground_color, background_color};
 }
 
@@ -472,6 +476,7 @@ const gfx::FontList& GM2TabStyle::GetFontList() const {
     return heavy_font_;
   }
 
+  BRAVE_GET_FONT_LIST
   return normal_font_;
 }
 
@@ -533,7 +538,7 @@ TabStyle::SeparatorBounds GM2TabStyle::GetSeparatorBounds(float scale) const {
   separator_bounds.leading =
       gfx::RectF(aligned_bounds.x() + corner_radius,
                  aligned_bounds.y() +
-                     (aligned_bounds.height() - separator_size.height()) / 2,
+                     aligned_bounds.height() - separator_size.height(),
                  separator_size.width(), separator_size.height());
 
   separator_bounds.trailing = separator_bounds.leading;
@@ -888,12 +893,16 @@ void GM2TabStyle::PaintSeparators(gfx::Canvas* canvas) const {
                                                    SK_AlphaOPAQUE));
   };
 
+  // Even if |separator_radius| becomes 1 native pixel the 'roundedness'
+  // will be approximated with color, although extremely subtle and
+  // likely only on screens >= 2x (i.e. separator width is 2+px)!
+  const int separator_radius =  separator_bounds.leading.width() / 2;
   cc::PaintFlags flags;
   flags.setAntiAlias(true);
   flags.setColor(separator_color(separator_opacities.left));
-  canvas->DrawRect(separator_bounds.leading, flags);
+  canvas->DrawRoundRect(separator_bounds.leading, separator_radius, flags);
   flags.setColor(separator_color(separator_opacities.right));
-  canvas->DrawRect(separator_bounds.trailing, flags);
+  canvas->DrawRoundRect(separator_bounds.trailing, separator_radius, flags);
 }
 
 // static
